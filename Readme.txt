CSE434: Computer Networks Project 3
By: Rizwan Ahmad and Stephen Pluta

In this project, a client and a server are modeled, with the client sending randomly generated characters to the server, and the server maintaining a string containing the last five received characters and returning this string to the client. The client is implemented in udpClient.c, and makes reference to a text file called inc.txt, which contains the incarnation number of the client (initialized to 0). The server, on the other hand, is implemented in udpServer.c.

In the client, there are a few things that happen. First, inc.txt is created and a 0 is written to it. After this, the IP of the current machine is retrieved by utilizing the gethostname() and getaddrinfo() functions. A socket with a timeout interval of 3 seconds, which will be used to communicate with the server, is then constructed. The program will then drop into a loop which sends 20 packets, in the form of a request struct, to the server. To do this, the struct is first populated with the client's IP, incarnation number, client number, and a random character. This struct is then sent to the server, and the client awaits a response. If the timeout is reached, the client will send the struct again, until the response is received. The client then prints out the data it receives, and iterates through the loop again until it has gone through 20 times.

While the loop is iterating, another integer, k, is used to simulate failures of the client. This is accomplished by initializing k to a random integer from 1 to 20. When the loop iterates k times, the loop will drop into a special if statement which determines whether or not a failure should be simulated. To do this, k is set to a new randomized number. If this new value of k is an even integer, then a failure is simulated and the value of the incarnation number (stored in inc.txt) is incremented. The loop then continues iterating until it reaches the new value of k (although it is possible that it will not reach k a second time), and repeats this process.

The server is a bit less complicated than the client. To initialize the server, an empty string of size 5 is created, and the socket is initialized and bound to the local address. At this point, the server drops into an infinite loop, where it will continuously receive and process requests. In any given iteration of this loop, the first thing that happens is deciding on whether or not the server will simulate a failure with the next received request. To do this, a random number from 1 to 10 is generated. If the number is 